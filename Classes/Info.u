DeclareClass Name=Music
DeclareClass Name=Pawn
DeclareClass Name=Script
DeclareClass Name=Texture
DeclareClass Name=Class
DeclareClass Name=Font
DeclareClass Name=Info
DeclareClass Name=StatusInfo
DeclareClass Name=ZoneInfo
DeclareClass Name=LevelInfo
DeclareClass Name=UnrealStatusInfo

Begin Class Name=Info
   Begin Text
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//=============================================================================
// Info, the root of all information holding classes.
// This is a built-in Unreal class and it shouldn't be modified.
//=============================================================================
class Info expands Actor
	abstract
	hideparent
	package(UnEngine);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
   End Text
   Begin DefaultProperties
      Owner=None
      Level=None
      XLevel=None
      Tag=None
      State=None
      Event=None
      Group=None
      Target=None
      Instigator=None
      Inventory=None
      Base=None
      Zone=None
      LatentAction=0
      ZoneNumber=0
      MiscNumber=0
      LatentByte=0
      LatentInt=0
      LatentFloat=+00000.000000
      LatentActor=None
      Touching(0)=None
      Touching(1)=None
      Touching(2)=None
      Touching(3)=None
      bStatic=False
      bHidden=True
      bHiddenEd=False
      bDirectional=False
      bSelected=False
      bNoDelete=False
      bAnimFinished=False
      bAnimLoop=False
      bLightChanged=False
      bDynamicLight=False
      bTimerLoop=False
      bCollideActors=False
      bCollideWorld=False
      bBlockActors=False
      bBlockPlayers=False
      bProjTarget=False
      Location=(+00000.000000,+00000.000000,+00000.000000)
      OldLocation=(+00000.000000,+00000.000000,+00000.000000)
      ColLocation=(+00000.000000,+00000.000000,+00000.000000)
      Velocity=(+00000.000000,+00000.000000,+00000.000000)
      Rotation=(0,0,0)
      Acceleration=(+00000.000000,+00000.000000,+00000.000000)
      DrawType=DT_Sprite
      BlitType=BT_Normal
      Texture=S_Actor
      Mesh=None
      Brush=None
      DrawScale=+00001.000000
      AmbientGlow=0
      SoundRadius=32
      SoundVolume=128
      SoundPitch=64
      AmbientSound=None
      CollisionRadius=+00022.000000
      CollisionHeight=+00022.000000
      LightType=LT_None
      LightEffect=LE_None
      LightBrightness=0
      LightHue=0
      LightSaturation=0
      LightRadius=0
      LightPeriod=0
      LightPhase=0
      LightCone=0
      VolumeBrightness=0
      VolumeRadius=0
      bSpecialLit=False
      bOnHorizon=False
      bActorShadows=False
      bUnlit=False
      bNoSmooth=False
      bOnlyOwnerSee=False
      bMeshWet=False
      bShadowCast=False
      bMeshEnviroMap=False
      bUser3=False
      bUser2=False
      bUser1=False
      bUser0=False
      Physics=PHYS_None
      Mass=+00100.000000
      Buoyancy=+00000.000000
      bMomentum=False
      bBounce=False
      bPitch=False
      bYaw=False
      bRoll=False
      bEnginePhysics=False
      LifeSpan=+00000.000000
      AnimSequence=0
      PrevSequence=0
      PrevFrame=0
      AnimFrame=+00000.000000
      AnimRate=+00000.000000
      AnimEnd=+00000.000000
      MinAnimRate=+00000.000000
      bDifficulty1=True
      bDifficulty2=True
      bDifficulty3=True
      bSinglePlayer=True
      bNet=True
      bNetSpecial=True
      bCanTeleport=False
      bIsSecretGoal=False
      bIsKillGoal=False
      bIsItemGoal=False
      TickRate=+00000.000000
      TimerRate=+00000.000000
      TickCounter=+00000.000000
      TimerCounter=+00000.000000
      DefaultEdCategory=General
   End DefaultProperties
End Class

Begin Class Name=StatusInfo
   Begin Text
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//=============================================================================
// StatusInfo, information the engine uses to render the status bar.
// One or more of these is allocated for each pawn that is 
// possessed by a player. This should not contain any new 
// information, but should just be updated to reflect the
// pawn's health, inventory, etc.
//
// The status bar items are drawn in this order:
// 1. Texture[0] through Texture[15] in that order.
// 2. Fonts  [0] through Fonts  [11] in that order.
// 3. Finally, any built-in engine graphics.
//
// Coordinates are based on a virtual screen of size ScaleHeight
// by ScaleWidth (default 320x200), and are automatically scaled 
// at render time to the actual resolution.
//=============================================================================
class StatusInfo expands Info
	hideparent
	package(UnEngine);

// Local scaling.
var() int ScaleHeight, ScaleWidth;

// Textures.
var() texture    Textures [16];
var() float      TexStartX[16], TexEndX[16];
var() float      TexStartY[16], TexEndY[16];

// Fonts to draw on top.
var() font       Fonts[12];
var() string[24] FontText;
var() float      FontStartX[12], FontEndX[12];
var() float      FontStartY[12], FontEndY[12];

// Internal.
var bool bDirty;
var texture Surface;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
   End Text
   Begin DefaultProperties
      ScaleHeight=200
      ScaleWidth=320
      Textures(0)=None
      Textures(1)=None
      Textures(2)=None
      Textures(3)=None
      Textures(4)=None
      Textures(5)=None
      Textures(10)=None
      Textures(14)=None
      Textures(15)=None
      TexStartX(5)=+00000.000000
      TexStartX(6)=+00000.000000
      TexStartX(12)=+00000.000000
      TexStartX(13)=+00000.000000
      TexStartX(14)=+00000.000000
      TexStartX(15)=+00000.000000
      TexEndX(0)=+00000.000000
      TexEndX(1)=+00000.000000
      TexEndX(6)=+00000.000000
      TexEndX(8)=+00000.000000
      TexEndX(9)=+00000.000000
      TexEndX(10)=+00000.000000
      TexEndX(11)=+00000.000000
      TexEndX(12)=+00000.000000
      TexEndX(13)=+00000.000000
      TexEndX(14)=+00000.000000
      TexEndX(15)=+00000.000000
      TexStartY(2)=+00000.000000
      TexStartY(4)=+00000.000000
      TexStartY(5)=+00000.000000
      TexStartY(6)=+00000.000000
      TexStartY(7)=+00000.000000
      TexStartY(8)=+00000.000000
      TexStartY(9)=+00000.000000
      TexStartY(10)=+00000.000000
      TexStartY(11)=+00000.000000
      TexStartY(14)=+00000.000000
      TexEndY(2)=+00000.000000
      TexEndY(3)=+00000.000000
      TexEndY(9)=+00000.000000
      TexEndY(10)=+00000.000000
      Fonts(0)=None
      Fonts(1)=None
      Fonts(2)=None
      Fonts(3)=None
      Fonts(4)=None
      Fonts(5)=None
      Fonts(6)=None
      Fonts(7)=None
      Fonts(10)=None
      FontText=""
      FontStartX(0)=+00000.000000
      FontStartX(4)=+00000.000000
      FontStartX(6)=+00000.000000
      FontStartX(7)=+00000.000000
      FontStartX(8)=+00000.000000
      FontStartX(9)=+00000.000000
      FontStartX(10)=+00000.000000
      FontStartX(11)=+00000.000000
      FontEndX(0)=+00000.000000
      FontEndX(4)=+00000.000000
      FontEndX(6)=+00000.000000
      FontEndX(7)=+00000.000000
      FontEndX(8)=+00000.000000
      FontEndX(10)=+00000.000000
      FontEndX(11)=+00000.000000
      FontStartY(0)=+00000.000000
      FontStartY(1)=+00000.000000
      FontStartY(2)=+00000.000000
      FontStartY(3)=+00000.000000
      FontStartY(4)=+00000.000000
      FontStartY(8)=+00000.000000
      FontEndY(0)=+00000.000000
      FontEndY(1)=+00000.000000
      FontEndY(7)=+00000.000000
      FontEndY(8)=+00000.000000
      bDirty=False
      Surface=None
   End DefaultProperties
End Class

Begin Class Name=UnrealStatusInfo
   Begin Text
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//=============================================================================
// Customized StatusInfo class for Unreal.
//=============================================================================
class UnrealStatusInfo expands StatusInfo
	package(UnGame);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
   End Text
   Begin DefaultProperties
      Textures(0)=StatusBar
      TexEndX(0)=+00320.000000
      TexStartY(0)=+00168.000000
      TexEndY(0)=+00200.000000
   End DefaultProperties
End Class

Begin Class Name=ZoneInfo
   Begin Text
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//=============================================================================
// ZoneInfo, the built-in Unreal class for defining properties
// of zones.  If you place one ZoneInfo actor in a
// zone you have partioned, the ZoneInfo defines the 
// properties of the zone.
// This is a built-in Unreal class and it shouldn't be modified.
//=============================================================================
class ZoneInfo expands Info
	hideparent
	package(UnEngine);

//-----------------------------------------------------------------------------
// Human-readable title of the zone.
var() string[64] Title;

//-----------------------------------------------------------------------------
// Zone flags.
var() bool   bWaterZone;   // Zone is water-filled.
var() bool   bFogZone;     // Zone is fog-filled.
var() bool   bKillZone;    // Zone instantly kills those who enter.
var() bool   bEchoZone;    // Sound echoes in this zone.
var() bool   bNeutralZone; // Players can't take damage in this zone.
var() bool   bGravityZone; // Use ZoneGravity.
var() bool   bTeamOnly;    // Only allow players from team named ZoneName.

//-----------------------------------------------------------------------------
// Zone movement.
var() vector ZoneGravity;  // Gravity acceleration in zone, if bGravityZone
var() vector ZoneVelocity; // Velocity added to actors in this zone.
var() float ZoneGroundFriction;
var() float ZoneFluidFriction;
var() name   ZonePlayerEvent;
var   int    ZonePlayerCount;
  
//-----------------------------------------------------------------------------
// Audio properties.
var() float  AuralSpace; // Size of zone, for echo volume.
var() float  AuralDepth; // Depth of zone, for echo delay.
var() music  Song;       // Song to play when in this zone or level.

//-----------------------------------------------------------------------------
// Zone rendering.
// Ambient lighting.
var() byte AmbientBrightness, AmbientHue, AmbientSaturation;

// Ramp lighting, software non-MMX only.
var() byte RampHue, RampSaturation;

// Fog.
var() byte FogThickness, FogHue, FogSaturation;

// Environment map texture for the zone.
var() texture EnvironmentMap;

//=============================================================================
// Iterator functions.

// Iterate through all actors in this zone.
intrinsic(308) iterator function ZoneActors( class BaseClass, out actor Actor );

//=============================================================================
// Engine notification functions.

// When a player enters this zone.
Function PlayerEntered( Pawn Other )
{
	if( ++ZonePlayerCount==1 && ZonePlayerEvent!='' )
		Broadcast( ZonePlayerEvent ).Trigger( Self, Other );
}

// When a player leaves this zone.
Function PlayerLeaving( Pawn Other )
{
	if( --ZonePlayerCount==0 && ZonePlayerEvent!='' )
		Broadcast( ZonePlayerEvent ).UnTrigger( Self, Other );
}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
   End Text
   Begin DefaultProperties
      bGravityZone=False
      ZoneGravity=(+00000.000000,+00000.000000,-00700.000000)
      ZoneGroundFriction=+00004.000000
      ZoneFluidFriction=+00000.000000
      AmbientSaturation=255
	  RampSaturation=255
      FogThickness=128
      FogHue=0
      FogSaturation=0
      Song=None
      bNoDelete=True
      DefaultEdCategory=ZoneInfo
   End DefaultProperties
End Class

Begin Class Name=LevelInfo
   Begin Text
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//=============================================================================
// LevelInfo contains information about the current level. There should 
// be one per level and it should be actor 0. UnrealEd creates each level's 
// LevelInfo automatically so you should never have to place one
// manually.
//
// The ZoneInfo properties in the LevelInfo are used to define
// the properties of all zones which don't themselves have ZoneInfo.
//=============================================================================
class LevelInfo expands ZoneInfo
	package(UnEngine);

#exec Texture Import File=..\Graphics\Backdrop.pcx Name=Backdrop
#exec Texture Import File=..\Graphics\Cloudcast.pcx Name=Cloudcast

enum ELevelState
{
	LEVEL_Down, 
	LEVEL_UpPlay,
	LEVEL_UpEdit,
	LEVEL_UpDemo
};

enum ESkyTime
{
	SKY_Day,
	SKY_Dusk,
	SKY_Night,
	SKY_Dawn,
};

//-----------------------------------------------------------------------------
// Level state.
var const ELevelState LevelState;

//-----------------------------------------------------------------------------
// Level time.

// Time passage.
var() float DayFactor;   // How fast a day passes, 1.0=daily, 24.0=hourly, 0.0=never.
var() float DayBase;     // If DayFactor=0, hardcoded time of day for this level.

// Current time.
var transient float TimeDays;      // Time scaled where 1.0 = 1 day.
var transient float TimeSeconds;   // Time scaled where 1.0 = 1 second.
var transient float DayFraction;   // How close the current time is to day   0.0-1.0.
var transient float NightFraction; // How close the current time is to night 0.0-1.0.
var transient int   Year;          // Year.
var transient int   Month;         // Month.
var transient int   Day;           // Day of month.
var transient int   Hour;          // Hour.
var transient int   Minute;        // Minute.
var transient int   Second;        // Second.
var transient int   Millisecond;   // Millisecond.

//-----------------------------------------------------------------------------
// Text info about level.
var() string[64] LevelAuthor;     // Who built it.
var() string[64] LevelEnterText;  // Message to tell players when they enter.

//-----------------------------------------------------------------------------
// Flags affecting the level.
var() bool           bLonePlayer; // No multiplayer coordination, i.e. for entranceways.
var(Sky) bool        bMirrorSky;  // Mirror sky below horizon.

//-----------------------------------------------------------------------------
// Textures.
var() float TexUPanSpeed, TexVPanSpeed; // Texture panning.

//-----------------------------------------------------------------------------
// Sky motion.
var(Sky) float SkyScale, SkyFlicker;         // Sky texture.
var(Sky) float SkyDayBright, SkyNightBright; // Brightnesses.
var(Sky) float SkyUPanSpeed, SkyVPanSpeed;   // Panning.
var(Sky) float SkyWavyness,  SkyWavySpeed;   // Wavyness.
var(Sky) bool  bNoSmoothSky;                 // Don't smooth sky texture.

//-----------------------------------------------------------------------------
// Sky texture.
var(Sky) texture SkyTexture;                 // Texture for the sky.
var(Sky) texture CloudcastTexture;           // Cloudcast texture for surfaces.

//-----------------------------------------------------------------------------
// Sky ambient lighting.
var(Sky) byte SkyFogBrightness, SkyFogHue, SkyFogSaturation;

//-----------------------------------------------------------------------------
// Miscellaneous information.
var() int RandomSeed;  // Random seed value, or 0 for none.
var int   RandomValue; // Random value for this level.

//-----------------------------------------------------------------------------
// Level scoring and goals, computed in BeginPlay.
var int ItemGoals, KillGoals, SecretGoals;

//-----------------------------------------------------------------------------
// Current play mode.
var byte   Difficulty;   // 0=easy, 1=medium, 2=hard, 3=very hard.
var byte   NetMode;      // 0=single player, 1=normal, 2=mode 2, 3=mode 3, 4=mode 4.
var bool   bNoMonsters;  // Whether monsters are allowed in this play mode.
var bool   bInternet;    // Whether Internet support is active.

//-----------------------------------------------------------------------------
// Level jumping.
var bool       bRestartLevel; // Restart level after tick is done.
var string[80] JumpToLevel;   // Jump to this level after tick is done.

//=============================================================================
// Functions.

//
// Initialize for gameplay.
//
function BeginPlay()
{
	// Generate random level value.
    RandomValue = rand(32767); 

	// Set Internet info.
	bInternet = false;
}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
   End Text
   Begin DefaultProperties
      LevelState=LEVEL_Down
      DayFactor=+00001.000000
      DayBase=+00000.000000
      LevelAuthor=""
      LevelEnterText=""
      TexUPanSpeed=+00001.000000
      TexVPanSpeed=+00001.000000
      SkyScale=+00001.000000
      SkyFlicker=+00000.040000
      SkyDayBright=+00001.000000
      SkyNightBright=+00000.600000
      SkyUPanSpeed=+00000.200000
      SkyVPanSpeed=+00000.200000
      SkyWavyness=+00002.000000
      SkyWavySpeed=+00001.000000
      SkyTexture=Backdrop
      CloudcastTexture=Cloudcast
      SkyPalette=None
      SkyFogBrightness=0
      SkyFogSaturation=255
      RandomSeed=0
      Title="Untitled"
      bHiddenEd=True
      DefaultEdCategory=Level
   End DefaultProperties
End Class

