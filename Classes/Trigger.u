DeclareClass Name=Script
DeclareClass Name=Pawn
DeclareClass Name=Class
DeclareClass Name=Projectile
DeclareClass Name=Triggers
DeclareClass Name=Trigger
DeclareClass Name=Counter
DeclareClass Name=Dispatcher
DeclareClass Name=InterpolationPoint
DeclareClass Name=PlayerPathTrigger

Begin Class Name=Triggers
   Begin Text
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//=============================================================================
// The parent class of all triggers and built-in event generators.
//=============================================================================
class Triggers expands Actor
	abstract
	package(UnEngine);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
   End Text
   Begin DefaultProperties
      bHidden=True
      bCollideActors=True
      CollisionRadius=+00040.000000
      CollisionHeight=+00040.000000
      DefaultEdCategory=Trigger
   End DefaultProperties
End Class

Begin Class Name=Trigger
   Begin Text
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//=============================================================================
// Trigger: senses things happening in its proximity and generates 
// sends Trigger/UnTrigger to actors whose names match 'EventName'.
//=============================================================================
class Trigger expands Triggers
	package(UnEngine);

//-----------------------------------------------------------------------------
// Trigger variables.

// Trigger type.
var() enum ETriggerType
{
	TT_PlayerProximity,	// Trigger is activated by player proximity.
	TT_AnyProximity,    // Trigger is activated by any actor in proximity.
	TT_Shoot,		    // Trigger is activated by player shooting it.
} TriggerType;

// Human readable triggering message.
var() string[80] Message;

// Only trigger once and then go dormant.
var() bool bTriggerOnceOnly;

//=============================================================================
// Trigger logic.

//
// See whether the other actor is relevant to this trigger.
//
final function bool IsRelevant( actor Other )
{
	switch( TriggerType )
	{
		case TT_PlayerProximity:
			return Pawn(Other)!=None && Pawn(Other).bIsPlayer;
		case TT_AnyProximity:
			return true;
		case TT_Shoot:
			return Projectile(Other)!=None;
	}
}

//
// Called when something touches the trigger.
//
function Touch( actor Other )
{
	if( IsRelevant( Other ) )
	{
		if( Event != '' )
			// Broadcast the Trigger message to all matching actors.
			Broadcast( Event ).Trigger( Other, Other.Instigator );

		if( Message != "" )
			// Send a string message to the toucher.
			Other.Instigator.Message( Message );

		if( bTriggerOnceOnly )
			// Ignore future touches.
			SetCollision(False);
	}
}

//
// When something untouches the trigger.
//
function UnTouch( actor Other )
{
	if( IsRelevant( Other ) )
	{
		if( Event != '' )
			// Untrigger all matching actors.
			Broadcast( Event ).UnTrigger( Other, Other.Instigator );
	}
}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
   End Text
   Begin DefaultProperties
      TriggerType=TT_PlayerProximity
      Message=""
      bTriggerOnceOnly=False
   End DefaultProperties
End Class

Begin Class Name=Counter
   Begin Text
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//=============================================================================
// Counter: waits until it has been triggered 'NumToCount' times, and then
// it sends Trigger/UnTrigger events to actors whose names match 'EventName'.
//=============================================================================
class Counter expands Triggers
	package(UnEngine);

//-----------------------------------------------------------------------------
// Counter variables.

var() byte       NumToCount;       // Number to count down from.
var() bool       bShowMessage;     // Display count message?
var() string[80] CountMessage;     // Human readable count message.
var() string[80] CompleteMessage;  // Completion message.
var   byte       OriginalNum;      // Number to count at startup time.

//-----------------------------------------------------------------------------
// Counter functions.

//
// Init for play.
//
function BeginPlay()
{
	OriginalNum = NumToCount;
}

//
// Reset the counter.
//
function Reset()
{
	NumToCount = OriginalNum;
}

//
// Counter was triggered.
//
function Trigger( actor Other, pawn EventInstigator )
{
	local string[255] S;
	local string[8] Num;
	local int i;

	log("Counter triggered " $ NumToCount);	

	if( NumToCount > 0 )
	{
		if( --NumToCount == 0 )
		{
			// Trigger all matching actors.
			if( bShowMessage && CompleteMessage != "" )
				Instigator.Message( CompleteMessage );
			if( Event != '' )
				Broadcast( Event ).UnTrigger( Other, EventInstigator );
		}
		else if( bShowMessage && CountMessage != "" )
		{
			// Still counting down.
			switch( NumToCount )
			{
				case 1:  Num="one"; break;
				case 2:  Num="two"; break;
				case 3:  Num="three"; break;
				case 4:  Num="four"; break;
				case 5:  Num="five"; break;
				case 6:  Num="six"; break;
				default: Num=string(NumToCount); break;
			}
			S = CountMessage;
			while( InStr(S, "%i") >= 0 )
			{
				i = InStr(S, "%i");
				S = Left(S,i) $ Num $ Mid(S,i+2);
			}
			Other.Instigator.Message(S);
		}
	}
}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
   End Text
   Begin DefaultProperties
      NumToCount=2
      bShowMessage=True
      CountMessage="Only %i more to go..."
      CompleteMessage="Completed!"
      OriginalNum=0
      DefaultEdCategory=Counter
   End DefaultProperties
End Class

Begin Class Name=Dispatcher
   Begin Text
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//=============================================================================
// Dispatcher: receives one trigger (corresponding to its name) as input, 
// then triggers a set of specifid events with optional delays.
//=============================================================================
class Dispatcher expands Triggers
	package(UnEngine);

//-----------------------------------------------------------------------------
// Dispatcher variables.
var() name  OutEvents[8]; // Events to generate.
var() float OutDelays[8]; // Relative delays before generating events.

var int i;       // Internal counter.
var actor Trigger; // Actor who activated this dispatcher.

//=============================================================================
// Dispatcher logic.

//
// When dispatcher is triggered...
//
function Trigger( actor Other, pawn EventInstigator )
{
	Trigger = Other;
	Instigator = EventInstigator;
	gotostate('Dispatch');
}

//
// Dispatch events.
//
state Dispatch
{
Begin:
	disable('Trigger');
	for( i=0; i<ArrayCount(OutEvents); i++ )
	{
		if( OutEvents[i] != '' )
		{
			Sleep(OutDelays[i]);
			Broadcast(OutEvents[i]).Trigger( Trigger, Instigator );
		}
	}
	enable('Trigger');
}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
   End Text
   Begin DefaultProperties
      OutEvents(0)=None
      OutEvents(1)=None
      OutEvents(2)=None
      OutEvents(3)=None
      OutEvents(4)=None
      OutEvents(5)=None
      OutEvents(6)=None
      OutEvents(7)=None
      OutDelays(0)=+00000.000000
      OutDelays(1)=+00000.000000
      OutDelays(2)=+00000.000000
      OutDelays(3)=+00000.000000
      OutDelays(4)=+00000.000000
      OutDelays(5)=+00000.000000
      OutDelays(6)=+00000.000000
      OutDelays(7)=+00000.000000
      i=0
      Trigger=None
      DefaultEdCategory=Dispatcher
   End DefaultProperties
End Class

Begin Class Name=PlayerPathTrigger
   Begin Text
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//=============================================================================
// PlayerPathTrigger.
//=============================================================================
class PlayerPathTrigger expands Triggers
	package(UnEngine);

// When touched, send the player flying along a path.
function Touch( actor Other )
{
	local InterpolationPoint i;
	if( Pawn(Other)!=None && Pawn(Other).bIsPlayer )
	{
		foreach AllActors( class 'InterpolationPoint', i, Tag )
		{
			if( i.Position == 0 )
			{
				Other.GotoState('');
				Other.SetCollision(Other.bCollideActors,false,false);
				Other.Target = i;
				Other.Physics = PHYS_Interpolating;
				Other.PhysRate = 1.0;
				Other.PhysAlpha = 0.0;
				Other.bInterpolating = true;
			}
		}
	}
}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
   End Text
   Begin DefaultProperties
   End DefaultProperties
End Class

