DeclareClass Name=Script
DeclareClass Name=Pawn
DeclareClass Name=Object
DeclareClass Name=Class
DeclareClass Name=Keypoint
DeclareClass Name=CreaturePoint
DeclareClass Name=BlockMonsters
DeclareClass Name=BlockAll
DeclareClass Name=AmbientSound
DeclareClass Name=TextMessage
DeclareClass Name=CreatureFactory
DeclareClass Name=Teleporter
DeclareClass Name=PlayerStart
DeclareClass Name=ScriptedPawn
DeclareClass Name=WayBeacon
DeclareClass Name=InterpolationPoint
DeclareClass Name=Patrolpoint
DeclareClass Name=Ambushpoint
DeclareClass Name=HomeBase
DeclareClass Name=Spawnpoint
DeclareClass Name=PathNode

Begin Class Name=Keypoint
   Begin Text
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//=============================================================================
// Keypoint, the base class of invisible actors which mark things.
//=============================================================================
class Keypoint expands Actor
	abstract
	package(UnEngine);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
   End Text
   Begin DefaultProperties
      bStatic=True
      bHidden=True
      SoundVolume=0
      CollisionRadius=+00010.000000
      CollisionHeight=+00010.000000
   End DefaultProperties
End Class

Begin Class Name=CreaturePoint
   Begin Text
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//=============================================================================
// CreaturePoint.
//=============================================================================
class CreaturePoint expands Keypoint
	package(UnEngine);

var() name ownerTeam;	//creature clan owning this area (area visible from this point)
var bool taken; //set when a creature is occupying this spot
var int upstreamPaths[16];
var int Paths[16]; //index of reachspecs (used by C++ Navigation code)
var() vector turnDirection; //defines orientation of corner
var float visitedWeight;
var() float cost; //added cost to visit this pathnode
var bool bEndPoint; //used by C++ navigation code
var bool bSpecialBlock; //use to force no use of path (during findpath)
var bool bPathsDefined; //set if paths have been defined

intrinsic(519) final function describeSpec(int iSpec); //FIXME - replace with function that returns spec values
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
   End Text
   Begin DefaultProperties
      ownerTeam=None
      taken=False
      upstreamPaths(0)=0
      upstreamPaths(1)=0
      upstreamPaths(2)=0
      upstreamPaths(3)=0
      upstreamPaths(4)=0
      upstreamPaths(5)=0
      upstreamPaths(6)=0
      upstreamPaths(7)=0
      upstreamPaths(8)=0
      upstreamPaths(9)=0
      upstreamPaths(10)=0
      upstreamPaths(11)=0
      upstreamPaths(12)=0
      upstreamPaths(13)=0
      upstreamPaths(14)=0
      upstreamPaths(15)=0
      Paths(0)=0
      Paths(1)=0
      Paths(2)=0
      Paths(3)=0
      Paths(4)=0
      Paths(5)=0
      Paths(6)=0
      Paths(7)=0
      Paths(8)=0
      Paths(9)=0
      Paths(10)=0
      Paths(11)=0
      Paths(12)=0
      Paths(13)=0
      Paths(14)=0
      Paths(15)=0
      turnDirection=(+00000.000000,+00000.000000,+00000.000000)
      visitedWeight=+00000.000000
      cost=+00000.000000
      bEndPoint=False
      bSpecialBlock=False
      bPathsDefined=False
      CollisionRadius=+00018.000000
      CollisionHeight=+00030.000000
      bCollideWhenPlacing=True
   End DefaultProperties
End Class

Begin Class Name=Patrolpoint
   Begin Text
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//=============================================================================
// PatrolPoint.
//=============================================================================
class PatrolPoint expands CreaturePoint
	package(UnEngine);

var() name Nextpatrol; //next point to go to
var() float pausetime; //how long to pause here
var() vector lookdir; //direction to look while stopped

function TellAboutTo(ScriptedPawn other)
{
	other.SetPatrol(Self);
}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
   End Text
   Begin DefaultProperties
      Nextpatrol=None
      pausetime=+00000.000000
      lookdir=(+00000.000000,+00000.000000,+00000.000000)
   End DefaultProperties
End Class

Begin Class Name=Ambushpoint
   Begin Text
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//=============================================================================
// Ambushpoint.
//=============================================================================
class AmbushPoint expands CreaturePoint
	package(UnEngine);

var() vector lookdir; //direction to look while ambushing
//at start, ambushing creatures will pick either their current location, or the location of
//some ambushpoint belonging to their team
var byte survivecount; //used when picking ambushpoint 

function TellAboutTo(ScriptedPawn other)
{
		other.SetAmbush(Self);
}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
   End Text
   Begin DefaultProperties
      lookdir=(+00000.000000,+00000.000000,+00000.000000)
      survivecount=0
   End DefaultProperties
End Class

Begin Class Name=HomeBase
   Begin Text
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//=============================================================================
// HomeBase.
//=============================================================================
class HomeBase expands CreaturePoint
	package(UnEngine);

var() float extent; //how far the base extends from central point (in line of sight)

function TellAboutTo(ScriptedPawn other)
{
		other.SetHome(Self);
}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
   End Text
   Begin DefaultProperties
      Extent=+00700.000000
   End DefaultProperties
End Class

Begin Class Name=Spawnpoint
   Begin Text
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//=============================================================================
// Spawnpoint.
//=============================================================================
class SpawnPoint expands CreaturePoint
	package(UnEngine);

function Create(class creatureClass)
{
	local actor newcreature;
	newcreature = Spawn(creatureClass);
	(Pawn(newcreature)).orders = 'Roaming';
}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
   End Text
   Begin DefaultProperties
   End DefaultProperties
End Class

Begin Class Name=PathNode
   Begin Text
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//=============================================================================
// PathNode.
//=============================================================================
class PathNode expands CreaturePoint
	package(UnEngine);

/*
function PreBeginPlay()
{
	local int j;
	log("Describe paths for pathnode at "$Location);
	for (j=0; j<16; j++)
	{
		if (Paths[j] != -1)
			describeSpec(Paths[j]);
	}
}
*/
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
   End Text
   Begin DefaultProperties
      CollisionRadius=+00046.000000
   End DefaultProperties
End Class

Begin Class Name=BlockMonsters
   Begin Text
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//=============================================================================
// BlockMonsters prevents monsters from passing, but allows players to cross.
//=============================================================================
class BlockMonsters expands Keypoint
	package(UnEngine);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
   End Text
   Begin DefaultProperties
      bCollideActors=True
      bBlockActors=True
      DefaultEdCategory=Collision
   End DefaultProperties
End Class

Begin Class Name=BlockAll
   Begin Text
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//=============================================================================
// Blocks all actors from passing.
//=============================================================================
class BlockAll Expands keypoint
	package(UnEngine);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
   End Text
   Begin DefaultProperties
      bCollideActors=True
      bBlockActors=True
      bBlockPlayers=True
      DefaultEdCategory=Collision
   End DefaultProperties
End Class

Begin Class Name=AmbientSound
   Begin Text
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//=============================================================================
// Ambient sound, sits there and emits its sound.  This class is no different 
// than placing any other actor in a level and setting its ambient sound.
//=============================================================================
class AmbientSound expands Keypoint
	package(UnEngine);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
   End Text
   Begin DefaultProperties
      DefaultEdCategory=Display
   End DefaultProperties
End Class

Begin Class Name=TextMessage
   Begin Text
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//=============================================================================
// Displays a text message when triggered or touched.
//=============================================================================
class TextMessage expands Keypoint
	package(UnEngine);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
   End Text
   Begin DefaultProperties
      bCollideActors=True
      DefaultEdCategory=TextMessage
   End DefaultProperties
End Class

Begin Class Name=CreatureFactory
   Begin Text
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//=============================================================================
// CreatureFactory.
//=============================================================================
class CreatureFactory expands Keypoint
	package(UnEngine);

var() class prototype; 	// the template class
var() byte maxpawns;	// max number of pawns from this factory at any time
var() byte backlog;		// number of pawns to build ASAP after player touch
var byte numspots;		// number of spawnspots
var() int capacity;		// max number of pawns ever buildable (-1 = no limit)
var() float interval;	// time interval between spawnings
var() bool bShowSpawns; // Spawns don't need to be covert
var Spawnpoint spawnspot[5]; //possible start locations

Auto State Waiting
{
function Touch(Actor Other)
	{
	local pawn otherpawn;
	log(other.class$" touched "$class);
	otherpawn = Pawn(Other);
	if (otherpawn != None)
		if (otherpawn.bIsPlayer)
			{
			log("factory is primed");
			GotoState('Spawning');
			}		
	}


Begin:
	log("Creature factory is ready");
}

State Spawning
{
Function Trigger(actor Other, pawn EventInstigator)
	{
	backlog += 1;
	maxpawns -= 1;
	if (backlog == 1)
		StartBuilding();
	}
	
function Timer()
	{
	local Spawnpoint bld;
	//pick a spawn point
	log("Factory built creature");
	if (numspots > 0)
		bld = spawnspot[0];
	
	bld.Create(prototype);
	backlog -= 1;
	if (capacity > 0)
		capacity -= 1;
	if (capacity == 0)
		GotoState('Finished');
		
	if (backlog > 0)
		StartBuilding();
	}

Function StartBuilding()
{
	SetTimer(interval, false);
}

Function CallBack(Object Other)
{
	local Spawnpoint newspot;
	newspot = Spawnpoint(Other);
	if (newspot != None)
		if (newspot.tag == tag)
			{
			spawnspot[numspots] = newspot;
			numspots += 1;
			}
}

Function GetSpawnspots()
{
	numspots = 0;
	Broadcast('', class 'Spawnpoint').Callme(Self);
	log("Got "$numspots$" spawn spots");
}
	
Begin:
	log("start factory");
	GetSpawnspots();
	StartBuilding();
}

state Finished
{
Begin:
	log("Creature factory going out of service");
}	
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
   End Text
   Begin DefaultProperties
      prototype=None
      maxpawns=0
      backlog=0
      numspots=0
      capacity=0
      interval=+00000.000000
      bShowSpawns=False
      spawnspot(0)=None
      spawnspot(1)=None
      spawnspot(2)=None
      spawnspot(3)=None
      spawnspot(4)=None
      bStatic=False
      bCollideActors=True
   End DefaultProperties
End Class

Begin Class Name=Teleporter
   Begin Text
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//=============================================================================
// Teleports actors either between different teleporters within a level
// or to matching teleporters on other levels, or to general Internet URLs.
//=============================================================================
class Teleporter expands Keypoint
	package(UnEngine);

//-----------------------------------------------------------------------------
// Teleporter URL can be one of the following forms:
//
// TeleporterName
//     Teleports to a named teleporter in this level.
//
// LevelName/TeleporterName
//     Teleports to a different level on this server.
//
// Unreal://Server.domain.com/LevelName/TeleporterName
//     Teleports to a different server on the net.
//
var() string[64] URL;

//-----------------------------------------------------------------------------
// Product the user must have installed in order to enter the teleporter.
var() name ProductRequired;

//-----------------------------------------------------------------------------
// Teleporter flags.
var() bool    bChangesVelocity; // Set velocity to TargetVelocity.
var() bool    bChangesYaw;      // Sets yaw to TargetYaw.
var() bool    bReversesX;       // Reverses X-component of velocity.
var() bool    bReversesY;       // Reverses Y-component of velocity.
var() bool    bReversesZ;       // Reverses Z-component of velocity.

//-----------------------------------------------------------------------------
// Teleporter directions.
var() int     TargetYaw;        // If bChangesYaw, set target's yaw to this.
var() vector  TargetVelocity;   // If bChangesVelocity, set target's velocity to this.

//-----------------------------------------------------------------------------
// Teleporter functions.

// Accept an actor that has teleported in.
function Accept( actor Incoming )
{
	// Move the actor here.
	Incoming.SetLocation( Location + vect (0,0,20));
	Incoming.Velocity = vect(0,0,0);

	// Play teleport-in effect.
}

// Teleporter was touched by an actor.
function Touch( actor Other )
{
	local Teleporter Dest;
	local int i;
	if( Other.bCanTeleport && Other.PreTeleport(Self)==false )
	{
		if( InStr( URL, "/" ) >= 0 )
		{
			// Teleport to a level on the net.
		}
		else
		{
			// Teleport to a random teleporter in this local level, if more than one pick random.
			foreach AllActors( class 'Teleporter', Dest )
				if( Dest.URL~=URL && Dest!=Self )
					i++;
			i = rand(i);
			foreach AllActors( class 'Teleporter', Dest )
				if( Dest.URL~=URL && Dest!=Self && i-- == 0 )
					break;
			if( Dest != None )
			{
				// Teleport the actor into the other teleporter.
				Other.Message( "Teleport ok!" );
				Dest.Accept( Other );

				// Play teleport-out effect.
			}
			else Other.Message( "Teleport destination not found!" );
		}
	}
}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
   End Text
   Begin DefaultProperties
      URL=""
      ProductRequired=None
      bChangesVelocity=False
      bChangesYaw=False
      bReversesX=False
      bReversesY=False
      bReversesZ=False
      TargetYaw=0
      TargetVelocity=(+00000.000000,+00000.000000,+00000.000000)
      bStatic=False
      bDirectional=True
      bCollideActors=True
      CollisionRadius=+00020.000000
      CollisionHeight=+00020.000000
      bCollideWhenPlacing=True
      DefaultEdCategory=Teleporter
   End DefaultProperties
End Class

Begin Class Name=PlayerStart
   Begin Text
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//=============================================================================
// Player start location.
//=============================================================================
class PlayerStart expands Keypoint 
	package(UnEngine);

#exec Texture Import File=..\Graphics\S_Player.pcx Name=S_Player Palette=Palette Mips=Off Flags=2

// Type of player to spawn.
var() class PlayerSpawnClass;

// Players on different teams are not spawned in areas with the
// same TeamNumber unless there are more teams in the level than
// team numbers.
var() byte TeamNumber;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
   End Text
   Begin DefaultProperties
      PlayerSpawnClass=Human
      TeamNumber=0
      bDirectional=True
      Texture=S_Player
      bCollideWhenPlacing=True
      DefaultEdCategory=PlayerStart
   End DefaultProperties
End Class

Begin Class Name=WayBeacon
   Begin Text
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//=============================================================================
// WayBeacon.
//=============================================================================
class WayBeacon expands Keypoint
	package(UnEngine);

//temporary beacon for serverfind navigation
#exec MESH IMPORT MESH=Lamp4 ANIVFILE=..\MODELS\lamp4_a.3D DATAFILE=..\MODELS\lamp4_d.3D X=0 Y=0 Z=0
#exec MESH ORIGIN MESH=Lamp4 X=0 Y=100 Z=-120 YAW=64

#exec MESH SEQUENCE MESH=Lamp4 SEQ=All  STARTFRAME=0  NUMFRAMES=1
#exec MESH SEQUENCE MESH=Lamp4 SEQ=Still  STARTFRAME=0   NUMFRAMES=1


#exec TEXTURE IMPORT NAME=Jlamp41 FILE=..\MODELS\lamp4.PCX FAMILY=!Skins PALETTE=Jlamp41 FLAGS=2

#exec MESHMAP NEW   MESHMAP=Lamp4 MESH=lamp4 
#exec MESHMAP SCALE MESHMAP=Lamp4 X=0.05 Y=0.05 Z=0.1

#exec MESHMAP SETTEXTURE MESHMAP=Lamp4 NUM=1 TEXTURE=Jlamp41

function touch(actor other)
{
	if (other == owner)
		Pawn(owner).ServerFind(0.0,'',"");
}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
   End Text
   Begin DefaultProperties
      bHidden=False
      bCollideActors=True
      DrawType=DT_Mesh
      Mesh=Lamp4
      DrawScale=+00000.500000
      AmbientGlow=40
      LightType=LT_Steady
      LightBrightness=125
      LightSaturation=125
      bOnlyOwnerSee=True
      LifeSpan=+00006.000000
   End DefaultProperties
End Class

Begin Class Name=InterpolationPoint
   Begin Text
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//=============================================================================
// InterpolationPoint.
//=============================================================================
class InterpolationPoint expands Keypoint
	package(UnEngine);

// Number in sequence sharing this tag.
var() int   Position;
var() float RateModifier;
var() bool  bEndOfPath;

// Other points in this interpolation path.
var InterpolationPoint Prev, Next;

// At start of gameplay, link all matching interpolation points together.
function BeginPlay()
{
	CallParent.BeginPlay();

	// Try to find previous.
	foreach AllActors( class 'InterpolationPoint', Prev, Tag )
		if( Prev.Position == Position-1 )
			break;
	if( Prev != None )
		Prev.Next = Self;

	// Try to find next.
	foreach AllActors( class 'InterpolationPoint', Next, Tag )
		if( Next.Position == Position+1 )
			break;
	if( Next == None )
		foreach AllActors( class 'InterpolationPoint', Next, Tag )
			if( Next.Position == 0 )
				break;
	if( Next != None )
		Next.Prev = Self;
}

function PostBeginPlay()
{
	// Verify that we're linked up.
	CallParent.PostBeginPlay();
	log( "Interpolation point " $ Tag $ " # " $ Position $ ":" );
	if( Prev != None )
		log( "   Prev # " $ Prev.Position );
	if( Next != None )
		log( "   Next # " $ Next.Position );
}

function InterpolateEnd( actor Other )
{
	if( bEndOfPath )	
	{
		if( Pawn(Other)!=None && Pawn(Other).bIsPlayer )
		{
			Pawn(Other).GotoState('PlayerWalking');
			Other.SetCollision(Other.bCollideActors,true,true);
		}
	}
}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
   End Text
   Begin DefaultProperties
      Position=0
      RateModifier=+00001.000000
      bEndOfPath=False
      Prev=None
      Next=None
      bStatic=False
      bDirectional=True
   End DefaultProperties
End Class

