/*=============================================================================
	UnIn.h: Unreal input system.

	Copyright 1997 Epic MegaGames, Inc. This software is a trade secret.
	Compiled with Visual C++ 4.0. Best viewed with Tabs=4.

Description:
	This subsystem contains all input.  The input is generated by the
	platform-specific code, and processed by the actor code.

Revision history:
	* Created by Tim Sweeney
=============================================================================*/

#ifndef _INC_UNIN
#define _INC_UNIN

/*-----------------------------------------------------------------------------
	Forward declarations.
-----------------------------------------------------------------------------*/

enum EInputState;		// State of the input system.
enum EInputKey;			// A native key code.
enum EInputReadFlags;	// Flags for reading input.
enum EButtons;			// An input button.
enum EAxis;				// An input axis.

/*-----------------------------------------------------------------------------
	State of the input system.
-----------------------------------------------------------------------------*/

// State of the input system.
enum EInputState
{
	IST_None		= 0,	// Not performing special input processing.
	IST_Press		= 1,	// Handling a keypress or button press.
	IST_Hold		= 2,	// Handling holding a key or button.
	IST_Release		= 3,	// Handling a key or button release.
	IST_Axis		= 4,	// Handling analog axis movement.
};

/*-----------------------------------------------------------------------------
	Keys and buttons.
-----------------------------------------------------------------------------*/

// Key and button codes.
//
// Codes <0x100 map exactly onto the Windows IK_ definitions, however
// you don't need to know that in order to use the keys in Unreal.
//
// Private to the input system.
enum EInputKey
{
/*00*/	IK_None			,IK_LButton		,IK_RButton		,IK_Cancel		,
/*04*/	IK_MButton		,IK_Unknown05	,IK_Unknown06	,IK_Unknown07	,
/*08*/	IK_Backspace	,IK_Tab         ,IK_Unknown0A	,IK_Unknown0B	,
/*0C*/	IK_Unknown0C	,IK_Enter	    ,IK_Unknown0E	,IK_Unknown0F	,
/*10*/	IK_Shift		,IK_Ctrl	    ,IK_Alt			,IK_Pause       ,
/*14*/	IK_CapsLock		,IK_Unknown15	,IK_Unknown16	,IK_Unknown17	,
/*18*/	IK_Unknown18	,IK_Unknown19	,IK_Unknown1A	,IK_Escape		,
/*1C*/	IK_Unknown1C	,IK_Unknown1D	,IK_Unknown1E	,IK_Unknown1F	,
/*20*/	IK_Space		,IK_PageUp      ,IK_PageDown    ,IK_End         ,
/*24*/	IK_Home			,IK_Left        ,IK_Up          ,IK_Right       ,
/*28*/	IK_Down			,IK_Select      ,IK_Print       ,IK_Execute     ,
/*2C*/	IK_PrintScrn	,IK_Insert      ,IK_Delete      ,IK_Help		,
/*30*/	IK_0			,IK_1			,IK_2			,IK_3			,
/*34*/	IK_4			,IK_5			,IK_6			,IK_7			,
/*38*/	IK_8			,IK_9			,IK_Unknown3A	,IK_Unknown3B	,
/*3C*/	IK_Unknown3C	,IK_Unknown3D	,IK_Unknown3E	,IK_Unknown3F	,
/*40*/	IK_Unknown40	,IK_A			,IK_B			,IK_C			,
/*44*/	IK_D			,IK_E			,IK_F			,IK_G			,
/*48*/	IK_H			,IK_I			,IK_J			,IK_K			,
/*4C*/	IK_L			,IK_M			,IK_N			,IK_O			,
/*50*/	IK_P			,IK_Q			,IK_R			,IK_S			,
/*54*/	IK_T			,IK_U			,IK_V			,IK_W			,
/*58*/	IK_X			,IK_Y			,IK_Z			,IK_Unknown5B	,
/*5C*/	IK_Unknown5C	,IK_Unknown5D	,IK_Unknown5E	,IK_Unknown5F	,
/*60*/	IK_NumPad0		,IK_NumPad1     ,IK_NumPad2     ,IK_NumPad3     ,
/*64*/	IK_NumPad4		,IK_NumPad5     ,IK_NumPad6     ,IK_NumPad7     ,
/*68*/	IK_NumPad8		,IK_NumPad9     ,IK_GreyStar    ,IK_GreyPlus    ,
/*6C*/	IK_Separator	,IK_GreyMinus	,IK_NumPadPeriod,IK_GreySlash   ,
/*70*/	IK_F1			,IK_F2          ,IK_F3          ,IK_F4          ,
/*74*/	IK_F5			,IK_F6          ,IK_F7          ,IK_F8          ,
/*78*/	IK_F9           ,IK_F10         ,IK_F11         ,IK_F12         ,
/*7C*/	IK_F13			,IK_F14         ,IK_F15         ,IK_F16         ,
/*80*/	IK_F17			,IK_F18         ,IK_F19         ,IK_F20         ,
/*84*/	IK_F21			,IK_F22         ,IK_F23         ,IK_F24         ,
/*88*/	IK_Unknown88	,IK_Unknown89	,IK_Unknown8A	,IK_Unknown8B	,
/*8C*/	IK_Unknown8C	,IK_Unknown8D	,IK_Unknown8E	,IK_Unknown8F	,
/*90*/	IK_NumLock		,IK_ScrollLock  ,IK_Unknown92	,IK_Unknown93	,
/*94*/	IK_Unknown94	,IK_Unknown95	,IK_Unknown96	,IK_Unknown97	,
/*98*/	IK_Unknown98	,IK_Unknown99	,IK_Unknown9A	,IK_Unknown9B	,
/*9C*/	IK_Unknown9C	,IK_Unknown9D	,IK_Unknown9E	,IK_Unknown9F	,
/*A0*/	IK_LShift		,IK_RShift      ,IK_LControl    ,IK_RControl    ,
/*A4*/	IK_UnknownA4	,IK_UnknownA5	,IK_UnknownA6	,IK_UnknownA7	,
/*A8*/	IK_UnknownA8	,IK_UnknownA9	,IK_UnknownAA	,IK_UnknownAB	,
/*AC*/	IK_UnknownAC	,IK_UnknownAD	,IK_UnknownAE	,IK_UnknownAF	,
/*B0*/	IK_UnknownB0	,IK_UnknownB1	,IK_UnknownB2	,IK_UnknownB3	,
/*B4*/	IK_UnknownB4	,IK_UnknownB5	,IK_UnknownB6	,IK_UnknownB7	,
/*B8*/	IK_UnknownB8	,IK_UnknownB9	,IK_Semicolon	,IK_Equals		,
/*BC*/	IK_Comma		,IK_Minus		,IK_Period		,IK_Slash		,
/*C0*/	IK_Tilde		,IK_UnknownC1	,IK_UnknownC2	,IK_UnknownC3	,
/*C4*/	IK_UnknownC4	,IK_UnknownC5	,IK_UnknownC6	,IK_UnknownC7	,
/*C8*/	IK_UnknownC8	,IK_UnknownC9	,IK_UnknownCA	,IK_UnknownCB	,
/*CC*/	IK_UnknownCC	,IK_UnknownCD	,IK_UnknownCE	,IK_UnknownCF	,
/*D0*/	IK_UnknownD0	,IK_UnknownD1	,IK_UnknownD2	,IK_UnknownD3	,
/*D4*/	IK_UnknownD4	,IK_UnknownD5	,IK_UnknownD6	,IK_UnknownD7	,
/*D8*/	IK_UnknownD8	,IK_UnknownD9	,IK_UnknownDA	,IK_LeftBracket	,
/*DC*/	IK_Backslash	,IK_RightBracket,IK_SingleQuote	,IK_UnknownDF	,
/*E0*/	IK_UnknownE0	,IK_UnknownE1	,IK_UnknownE2	,IK_UnknownE3	,
/*E4*/	IK_UnknownE4	,IK_UnknownE5	,IK_UnknownE6	,IK_UnknownE7	,
/*E8*/	IK_UnknownE8	,IK_UnknownE9	,IK_UnknownEA	,IK_UnknownEB	,
/*EC*/	IK_UnknownEC	,IK_UnknownED	,IK_UnknownEE	,IK_UnknownEF	,
/*F0*/	IK_UnknownF0	,IK_UnknownF1	,IK_UnknownF2	,IK_UnknownF3	,
/*F4*/	IK_UnknownF4	,IK_UnknownF5	,IK_Attn		,IK_CrSel		,
/*F8*/	IK_ExSel		,IK_ErEof		,IK_Play		,IK_Zoom		,
/*FC*/	IK_NoName		,IK_PA1			,IK_OEMClear	,IK_UnknownFF	,
/*100*/ IK_JoyX			,IK_JoyY		,IK_JoyZ		,IK_JoyW		,
/*104*/	IK_MouseX		,IK_MouseY		,IK_MouseZ		,IK_MouseW		,
/*108*/	IK_Joy1			,IK_Joy2		,IK_Joy3		,IK_Joy4		,
/*10C*/	IK_MAX
};

/*-----------------------------------------------------------------------------
	FInputBase.
-----------------------------------------------------------------------------*/

//	Input binding commands are of the form:
//
//	Bind <inputkey_name> "button <button_name>"
//	Bind <inputkey_name> "toggle <button_name>"
//  Bind <inputkey_name> "<axis_name> [speed=<#>] [accel=<#>] [decel=<#>]"
//	Bind <inputkey_name> "<command>"
//
//		Where <command_string> is any console command line, with multiple
//		commands separated by "|" characters.
//
// The axes BaseX and BaseY are the untranslated X and Y axes of movement
// of the mouse or joystick. They are added to the appropriate other axes
// based on the status of the look-around button, strafe button, etc.

// The input system base class.
class FInputBase
{
public:
	// Init and exit.
	virtual void Init( UCamera *Camera, FGlobalPlatform *App )=0;
	virtual void Exit()=0;

	// Command line execution. Returns 1 if executed, 0 if not.
	virtual int Exec( const char *Cmd, FOutputDevice *Out )=0;
	virtual int Process( FOutputDevice &Out, EInputKey iKey, EInputState State, FLOAT Delta=0.0 )=0;

	// Key binding.
	virtual void SaveBindings( FOutputDevice& Out )=0;
	virtual void Bind( EInputKey iKey, const char *Command )=0;

	// Read the input for a camera.
	// Sets Buttons to bit flags indicating the held buttons.
	// Sets DestAxes to an array of floats containing the EInputAxis movements.
	virtual void ReadInput( PPlayerTick &Move, FLOAT DeltaSeconds, FOutputDevice *Out )=0;

	// Reset the input subsystem.
	virtual void ResetInput()=0;

	// Looking up names.
	virtual const char *GetButtonName( EButtons Button ) const=0;
	virtual const char *GetAxisName( EAxis Axis ) const=0;
	virtual const char *GetKeyName( EInputKey Key ) const=0;

	// Finding names.
	virtual int FindKeyName( const char *KeyName, EInputKey &iKey ) const=0;
	virtual int FindButtonName( const char *ButtonName, EButtons &iButton) const=0;
	virtual int FindAxisName( const char *AxisName, EAxis &iAxis) const=0;

	// State accessors.
	void SetInputState( EInputState NewState, FLOAT NewDelta=0.0 )
		{State = NewState; Delta = NewDelta;}
	EInputState GetInputState()
		{return State;}
	FLOAT GetInputDelta()
		{return Delta;}

	// Key accessors.
	BYTE KeyDown( int i ) {return KeyDownTable[Clamp(i,0,IK_MAX-1)];}

	// Private variables.
	EInputState State;
	FLOAT Delta;
	BYTE KeyDownTable[IK_MAX];
};

/*-----------------------------------------------------------------------------
	Create a new input subsystem.
-----------------------------------------------------------------------------*/

FInputBase *NewInput();

/*-----------------------------------------------------------------------------
	The End.
-----------------------------------------------------------------------------*/
#endif // _INC_UNIN
